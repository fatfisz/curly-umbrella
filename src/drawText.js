import context from 'context';

const letters = {
  a: [[1,1,1], [1,,1], [1,1,1], [1,,1], [1,,1]],
  b: [[1,1,,], [1,,1], [1,1], [1,,1], [1,1]],
  c: [[1,1,1], [1], [1], [1], [1,1,1]],
  d: [[1,1,,], [1,,1], [1,,1], [1,,1], [1,1]],
  e: [[1,1,1], [1], [1,1], [1], [1,1,1]],
  f: [[1,1,1], [1], [1,1], [1], [1]],
  g: [[1,1,1], [1], [1,,1], [1,,1], [1,1,1]],
  h: [[1,,1], [1,,1], [1,1,1], [1,,1], [1,,1]],
  i: [[1], [1], [1], [1], [1]],
  j: [[1,1,1], [,,1], [,,1], [1,,1], [,1,1]],
  k: [[1,,1], [1,,1], [1,1], [1,,1], [1,,1]],
  l: [[1,,,], [1], [1], [1], [1,1,1]],
  m: [[1,,,,1], [1,1,,1,1], [1,,1,,1], [1,,,,1], [1,,,,1]],
  n: [[1,,,1], [1,1,,1], [1,,1,1], [1,,,1], [1,,,1]],
  o: [[1,1,1], [1,,1], [1,,1], [1,,1], [1,1,1]],
  p: [[1,1,1], [1,,1], [1,1,1], [1], [1]],
  q: [[1,1,1,,], [1,,1], [1,,1], [1,,1], [1,1,1,1]],
  r: [[1,1,1], [1,,1], [1,1,1], [1,1], [1,,1]],
  s: [[1,1,1], [1], [1,1,1], [,,1], [1,1,1]],
  t: [[1,1,1], [,1], [,1], [,1], [,1]],
  u: [[1,,1], [1,,1], [1,,1], [1,,1], [1,1,1]],
  v: [[1,,1], [1,,1], [1,,1], [1,,1], [,1]],
  w: [[1,,,,1], [1,,,,1], [1,,1,,1], [1,,1,,1], [1,1,1,1,1]],
  x: [[1,,1], [1,,1], [,1], [1,,1], [1,,1]],
  y: [[1,,1], [1,,1], [1,1,1], [,1], [,1]],
  z: [[1,1,1], [,,1], [,1], [1], [1,1,1]],
  1: [[,,1], [,1,1], [,,1], [,,1], [,,1]],
  2: [[1,1,,], [,,1], [,1], [1], [1,1,1]],
  3: [[1,1,,], [,,1], [,1], [,,1], [1,1]],
  4: [[1,,,], [1], [1,,1], [1,1,1], [,,1]],
  5: [[1,1,1], [1], [1,1], [,,1], [1,1]],
  6: [[,1,,], [1], [1,1], [1,,1], [,1]],
  7: [[1,1,1], [,,1], [,,1], [,1], [,1]],
  8: [[,1,,], [1,,1], [,1], [1,,1], [,1]],
  9: [[,1,,], [1,,1], [,1,1], [,,1], [,1]],
  0: [[,1,,], [1,,1], [1,,1], [1,,1], [,1]],
  ' ': [[,], [], [], [], []],
  '.': [[,], [], [], [], [1]],
  '!': [[1], [1], [1], [], [1]],
  ':': [[,], [1], [], [1], []],
  '-': [[,,], [], [1,1], [], []],
  '/': [[,,1], [,,1], [,1], [1], [1]],
  '?': [[1,1,1], [,,1], [,1], [], [,1]],
  '%': [[1,,1], [,,1], [,1], [1], [1,,1]],
};

function drawLetter(x, y, char, pixelSize) {
  letters[char].forEach((row, yIndex) => {
    row.forEach((pixel, xIndex) => {
      if (pixel) {
        context.rect(x + xIndex * pixelSize, y + yIndex * pixelSize, pixelSize, pixelSize);
      }
    });
  });
}

function measure(text, pixelSize) {
  return [].reduce.call(
    text,
    (width, char, index) => width + letters[char][0].length,
    text.length - 1,
  ) * pixelSize;
}

export default function drawText(size, text, x, y, color, align) {
  const ensuredText = String(text);
  const pixelSize = size / 5;
  let currentX = x;

  switch (align) {
    case 'center':
      currentX -= measure(ensuredText, pixelSize) / 2;
      break;
    case 'right':
      currentX -= measure(ensuredText, pixelSize);
      break;
  }

  context.beginPath();
  for (const char of ensuredText) {
    drawLetter(currentX, y, char, pixelSize);
    currentX += (1 + letters[char][0].length) * pixelSize;
  }
  context.fillStyle = color;
  context.fill();
}
